// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VillageDrill.Data;

namespace VillageDrill.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190807235150_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("VillageDrill.Models.Objects.AssemblyHistory", b =>
                {
                    b.Property<int>("AssemblyHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AssemblyDate");

                    b.Property<int>("ItemID");

                    b.Property<string>("LastModifiedBy");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<string>("Notes");

                    b.Property<int>("QtyAssembled");

                    b.HasKey("AssemblyHistoryID");

                    b.HasIndex("ItemID");

                    b.ToTable("AssemblyHistory");
                });

            modelBuilder.Entity("VillageDrill.Models.Objects.AssemblyRecipe", b =>
                {
                    b.Property<int>("AssemblyRecipeID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ItemID");

                    b.HasKey("AssemblyRecipeID");

                    b.HasIndex("ItemID");

                    b.ToTable("AssemblyRecipe");
                });

            modelBuilder.Entity("VillageDrill.Models.Objects.InventoryLog", b =>
                {
                    b.Property<int>("LogID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ItemID");

                    b.Property<string>("LastModifiedBy");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<int>("NewQty");

                    b.Property<int>("PreviousQty");

                    b.Property<bool>("Reconciled");

                    b.HasKey("LogID");

                    b.HasIndex("ItemID");

                    b.ToTable("InventoryLog");
                });

            modelBuilder.Entity("VillageDrill.Models.Objects.Item", b =>
                {
                    b.Property<int>("ItemID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("ItemName")
                        .IsRequired();

                    b.Property<string>("LastModifiedBy");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<decimal>("ListRetailCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MaxQty");

                    b.Property<decimal>("MeasureAmnt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("MeasuresMeasureID");

                    b.Property<int>("OnHandQty");

                    b.Property<int>("ReorderQty");

                    b.HasKey("ItemID");

                    b.HasIndex("MeasuresMeasureID");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("VillageDrill.Models.Objects.Measures", b =>
                {
                    b.Property<int>("MeasureID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MeasureName")
                        .IsRequired();

                    b.HasKey("MeasureID");

                    b.ToTable("Measures");
                });

            modelBuilder.Entity("VillageDrill.Models.Objects.OrderItem", b =>
                {
                    b.Property<int>("OrderItemID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ItemID");

                    b.Property<string>("LastModifiedBy");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("PurchaseOrderID");

                    b.Property<int>("QuantityOrdered");

                    b.Property<string>("VendorSKU")
                        .IsRequired();

                    b.HasKey("OrderItemID");

                    b.HasIndex("ItemID");

                    b.HasIndex("PurchaseOrderID");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("VillageDrill.Models.Objects.PurchaseOrder", b =>
                {
                    b.Property<int>("PurchaseOrderID");

                    b.Property<DateTime>("DateOrdered");

                    b.Property<DateTime>("EstimatedDelivery");

                    b.Property<string>("LastModifiedBy");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<bool>("Status");

                    b.Property<int>("VendorID");

                    b.Property<string>("VendorPO")
                        .IsRequired();

                    b.HasKey("PurchaseOrderID");

                    b.ToTable("PurchaseOrder");
                });

            modelBuilder.Entity("VillageDrill.Models.Objects.ReceivedItems", b =>
                {
                    b.Property<int>("RecievedID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateReceived");

                    b.Property<string>("LastModifiedBy");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<string>("Notes");

                    b.Property<int>("QuantityReceived");

                    b.Property<int>("VendorID");

                    b.HasKey("RecievedID");

                    b.HasIndex("VendorID");

                    b.ToTable("ReceivedItems");
                });

            modelBuilder.Entity("VillageDrill.Models.Objects.RecipeLine", b =>
                {
                    b.Property<int>("RecipeLineID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssemblyRecipeID");

                    b.Property<int>("ItemID");

                    b.Property<string>("LastModifiedBy");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<int>("RequiredItemQuantity");

                    b.HasKey("RecipeLineID");

                    b.HasIndex("AssemblyRecipeID");

                    b.HasIndex("ItemID");

                    b.ToTable("RecipeLine");
                });

            modelBuilder.Entity("VillageDrill.Models.Objects.Vendor", b =>
                {
                    b.Property<int>("VendorID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LastModifiedBy");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("VendorAddress")
                        .IsRequired();

                    b.Property<string>("VendorName")
                        .IsRequired();

                    b.HasKey("VendorID");

                    b.ToTable("Vendor");
                });

            modelBuilder.Entity("VillageDrill.Models.Objects.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Name");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VillageDrill.Models.Objects.AssemblyHistory", b =>
                {
                    b.HasOne("VillageDrill.Models.Objects.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("VillageDrill.Models.Objects.AssemblyRecipe", b =>
                {
                    b.HasOne("VillageDrill.Models.Objects.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("VillageDrill.Models.Objects.InventoryLog", b =>
                {
                    b.HasOne("VillageDrill.Models.Objects.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("VillageDrill.Models.Objects.Item", b =>
                {
                    b.HasOne("VillageDrill.Models.Objects.Measures", "Measures")
                        .WithMany()
                        .HasForeignKey("MeasuresMeasureID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("VillageDrill.Models.Objects.OrderItem", b =>
                {
                    b.HasOne("VillageDrill.Models.Objects.Item", "Item")
                        .WithMany("OrderItems")
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("VillageDrill.Models.Objects.PurchaseOrder", "PurchaseOrder")
                        .WithMany("OrderItems")
                        .HasForeignKey("PurchaseOrderID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("VillageDrill.Models.Objects.PurchaseOrder", b =>
                {
                    b.HasOne("VillageDrill.Models.Objects.Vendor", "Vendor")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("PurchaseOrderID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("VillageDrill.Models.Objects.ReceivedItems", b =>
                {
                    b.HasOne("VillageDrill.Models.Objects.Vendor", "Vendor")
                        .WithMany()
                        .HasForeignKey("VendorID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("VillageDrill.Models.Objects.RecipeLine", b =>
                {
                    b.HasOne("VillageDrill.Models.Objects.AssemblyRecipe", "AssemblyRecipe")
                        .WithMany()
                        .HasForeignKey("AssemblyRecipeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("VillageDrill.Models.Objects.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
